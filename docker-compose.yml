version: '3'


services:
  bitwarden:
    # Standard Bitwarden is very resource-heavy and cannot run on micro cloud instances
    # Vaultwarden is a Rust (mostly) feature-complete implementation of Bitwarden
    # https://github.com/dani-garcia/vaultwarden
    #build: ./docker/bitwarden                                  # backup, in case container registry is not responsive
    image: ghcr.io/dadatuputi/bwgc_vaultwarden:master           # from https://github.com/dadatuputi/bwgc_vaultwarden
    restart: always
    container_name: bitwarden
    depends_on: 
    - proxy
    volumes:
    - ${PWD}/bitwarden:/data
    ports:
    - 5271:80
    environment:
    - LOG_FILE=/data/bitwarden.log
    - WEBSOCKET_ENABLED=true            # required for websockets
    - SHOW_PASSWORD_HINT=false
    - DOMAIN=https://${DOMAIN}          # DOMAIN is set in .env but doesn't have protocol prefix
    - SMTP_FROM_NAME=Bitwarden (${DOMAIN})
    - IP_HEADER=X-Real-IP               # X-Real-IP cannot be overwritten by the user
    - ADMIN_TOKEN                       # Value-less variables are set in .env
    - SIGNUPS_ALLOWED
    - SMTP_HOST
    - SMTP_FROM
    - SMTP_PORT
    - SMTP_SECURITY
    - SMTP_USERNAME
    - SMTP_PASSWORD
    - YUBICO_CLIENT_ID
    - YUBICO_SECRET_KEY
    - YUBICO_SERVER
    - ORG_CREATION_USERS
    - BACKUP
    - BACKUP_SCHEDULE
    - BACKUP_DAYS
    - BACKUP_DIR
    - BACKUP_EMAIL_FROM_NAME
    - BACKUP_ENCRYPTION_KEY
    - BACKUP_EMAIL_TO
    - BACKUP_EMAIL_NOTIFY
    - BACKUP_RCLONE_CONF
    - BACKUP_RCLONE_DEST
    - TZ

  tunnel:
    container_name: cloudflared
    image: cloudflare/cloudflared
    restart: always
    command: tunnel run
    depends_on:
      - bitwarden
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}

  fail2ban:
    # Implements fail2ban functionality, banning ips that 
    # try to bruteforce your vault
    # https://github.com/dani-garcia/vaultwarden/wiki/Fail2Ban-Setup
    # https://github.com/crazy-max/docker-fail2ban
    image: crazymax/fail2ban:latest
    restart: always
    container_name: fail2ban
    depends_on:
    - bitwarden
    volumes:
    - ${PWD}/fail2ban:/data
    - ${PWD}/bitwarden:/bitwarden:ro
    network_mode: "host"
    privileged: true
    cap_add:
    - NET_ADMIN
    - NET_RAW
    environment:
    - F2B_DB_PURGE_AGE=30d
    - F2B_LOG_TARGET=/data/fail2ban.log
    - F2B_LOG_LEVEL=INFO
    - F2B_IPTABLES_CHAIN=INPUT
    - SSMTP_HOST=${SMTP_HOST}
    - SSMTP_PORT=${SMTP_PORT}
    - SSMTP_USER=${SMTP_USERNAME}
    - SSMTP_PASSWORD=${SMTP_PASSWORD}
    - SSMTP_HOSTNAME=Bitwarden (${DOMAIN})
    - SSMTP_TLS=${SMTP_TLS}
    - SSMTP_STARTTLS=YES
    - TZ

  watchtower:
    # Watchtower will pull down your new image, gracefully shut down your existing container 
    # and restart it with the same options that were used when it was deployed initially
    # https://github.com/containrrr/watchtower
    image: containrrr/watchtower
    restart: always
    container_name: watchtower
    depends_on: 
    - bitwarden
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    environment:
    - WATCHTOWER_CLEANUP=true
    - WATCHTOWER_SCHEDULE
    - TZ
